# webrtc.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from websocket import manager
import logging

logger = logging.getLogger(__name__)
router = APIRouter()

@router.websocket("/ws/webrtc/{room_id}/{user_id}")
async def webrtc_websocket(websocket: WebSocket, room_id: str, user_id: str):
    room_key = f"webrtc_{room_id}"
    
    logger.info(f"üéØ NEW WEBSOCKET: User {user_id} connecting to room {room_id}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await manager.connect(websocket, room_key, user_id)
        logger.info(f"‚úÖ CONNECTED: User {user_id} in room {room_id}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await websocket.receive_json()
                message_type = data.get('type', 'unknown')
                
                logger.info(f"üì® MESSAGE: {type} from {user_id}")
                
                # ‚úÖ –ü–†–û–°–¢–û –ü–ï–†–ï–°–´–õ–ê–ï–ú –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –í–°–ï–ú –£–ß–ê–°–¢–ù–ò–ö–ê–ú
                await manager.broadcast({
                    **data,
                    "from_user_id": user_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                }, room_key, exclude_websocket=websocket)
                
            except WebSocketDisconnect:
                logger.info(f"üîå NORMAL DISCONNECT: User {user_id} from room {room_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå MESSAGE ERROR: User {user_id}: {e}")
                continue
                
    except WebSocketDisconnect:
        logger.info(f"üîå DISCONNECT DURING CONNECT: User {user_id}")
    except Exception as e:
        logger.error(f"‚ùå WEBSOCKET ERROR: User {user_id}: {e}")
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info(f"üßπ CLEANUP: User {user_id} from room {room_id}")
        await manager.disconnect(websocket, room_key, user_id)