import React, { useState, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from './AuthContext';
import WebRTCManager from './WebRTCManager';
import './RoomPage.css';
import { WS_BASE } from '../config';

function RoomPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  
  const { roomId, inviteLink, roomName, isHost } = location.state || {};
  const [webrtcManager, setWebrtcManager] = useState(null);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStreams, setRemoteStreams] = useState({});
  const [isAudioEnabled, setIsAudioEnabled] = useState(true);
  const [isVideoEnabled, setIsVideoEnabled] = useState(true);
  const [error, setError] = useState('');
  const [showInviteModal, setShowInviteModal] = useState(false);
  const [participants, setParticipants] = useState([]);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');

  const localVideoRef = useRef();
  const remoteVideosRef = useRef({});

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('üîç Room Debug Info:', {
      roomId,
      currentUserId: currentUser?.id,
      currentUserName: currentUser?.name,
      isHost,
      participantsCount: participants.length,
      remoteStreamsCount: Object.keys(remoteStreams).length
    });
  }, [roomId, currentUser, isHost, participants, remoteStreams]);

  // WebSocket –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  useEffect(() => {
    if (!roomId || !currentUser) return;

    const syncWs = new WebSocket(`${WS_BASE}/ws/${roomId}`);
    
    syncWs.onopen = () => {
      console.log('üîÑ Sync WebSocket connected');
      syncWs.send(JSON.stringify({
        type: 'user_joined',
        user_id: currentUser.id,
        user_name: currentUser.name,
        is_host: isHost
      }));
    };

    syncWs.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        
        if (data.type === 'user_joined' && data.user_id !== currentUser.id) {
          console.log('üîÑ Sync: New user joined:', data.user_name);
          setParticipants(prev => {
            if (!prev.find(p => p.id === data.user_id)) {
              return [...prev, {
                id: data.user_id,
                name: data.user_name,
                isHost: data.is_host
              }];
            }
            return prev;
          });
        }
        
        if (data.type === 'user_left') {
          console.log('üîÑ Sync: User left:', data.user_id);
          setParticipants(prev => prev.filter(p => p.id !== data.user_id));
        }
        
      } catch (error) {
        console.error('Sync WebSocket error:', error);
      }
    };

    syncWs.onclose = () => {
      console.log('üîÑ Sync WebSocket disconnected');
    };

    return () => {
      syncWs.close();
    };
  }, [roomId, currentUser, isHost]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC
  useEffect(() => {
    if (!roomId || !currentUser) {
      navigate('/');
      return;
    }

    initializeWebRTC();

    return () => {
      if (webrtcManager) {
        webrtcManager.destroy();
      }
    };
  }, [roomId, currentUser]);

  const initializeWebRTC = async () => {
    try {
      setConnectionStatus('connecting');
      const manager = new WebRTCManager(
        roomId,
        currentUser.id.toString(),
        handleRemoteStream,
        handleUserLeft
      );

      const stream = await manager.initialize();
      setWebrtcManager(manager);
      setLocalStream(stream);
      setConnectionStatus('connected');
      
      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      setParticipants([{
        id: currentUser.id,
        name: currentUser.name,
        isHost: isHost
      }]);

    } catch (error) {
      console.error('Failed to initialize WebRTC:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      setConnectionStatus('error');
    }
  };

  const handleRemoteStream = (userId, stream) => {
    console.log('üé¨ Handling remote stream from:', userId);
    setRemoteStreams(prev => ({
      ...prev,
      [userId]: stream
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    setParticipants(prev => {
      if (!prev.find(p => p.id.toString() === userId.toString())) {
        return [...prev, {
          id: userId,
          name: `–£—á–∞—Å—Ç–Ω–∏–∫ ${userId}`,
          isHost: false
        }];
      }
      return prev;
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    setTimeout(() => {
      if (remoteVideosRef.current[userId]) {
        remoteVideosRef.current[userId].srcObject = stream;
        console.log('‚úÖ Remote video stream set for user:', userId);
      }
    }, 100);
  };

  const handleUserLeft = (userId) => {
    console.log('üë§ User left:', userId);
    setRemoteStreams(prev => {
      const newStreams = { ...prev };
      delete newStreams[userId];
      return newStreams;
    });

    setParticipants(prev => prev.filter(p => p.id.toString() !== userId.toString()));
  };

  const toggleAudio = () => {
    if (webrtcManager) {
      const enabled = webrtcManager.toggleAudio();
      setIsAudioEnabled(enabled);
    }
  };

  const toggleVideo = async () => {
    if (webrtcManager) {
      try {
        const enabled = webrtcManager.toggleVideo();
        setIsVideoEnabled(enabled);
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ, –Ω–æ –ø–æ—Ç–æ–∫ –ø—É—Å—Ç–æ–π - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É
        if (enabled && localStream && localStream.getVideoTracks().length === 0) {
          await restartCamera();
        }
      } catch (error) {
        console.error('Error toggling video:', error);
      }
    }
  };

  const restartCamera = async () => {
    if (webrtcManager) {
      try {
        console.log('üîÑ Restarting camera...');
        const newStream = await webrtcManager.restartMedia();
        setLocalStream(newStream);
        if (localVideoRef.current) {
          localVideoRef.current.srcObject = newStream;
        }
        setIsVideoEnabled(true);
        console.log('‚úÖ Camera restarted successfully');
      } catch (error) {
        console.error('Failed to restart camera:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É');
      }
    }
  };

  const copyInviteLink = () => {
    const fullInviteLink = `${window.location.origin}/?join=${inviteLink}`;
    navigator.clipboard.writeText(fullInviteLink)
      .then(() => {
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
        const textArea = document.createElement('textarea');
        textArea.value = fullInviteLink;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
      });
    setShowInviteModal(false);
  };

  const leaveRoom = () => {
    if (webrtcManager) {
      webrtcManager.destroy();
    }
    navigate('/');
  };

  const openInviteModal = () => {
    setShowInviteModal(true);
  };

  const closeInviteModal = () => {
    setShowInviteModal(false);
  };

  if (!roomId) {
    return <div>–û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>;
  }

  return (
    <div className="room-page">
      <header className="room-header">
        <div className="room-header-content">
          <div className="room-info">
            <h2>–ö–æ–º–Ω–∞—Ç–∞: {roomName}</h2>
            <div className="room-details">
              <span className="room-id">ID: {roomId}</span>
              <span className="invite-code">–ö–æ–¥: {inviteLink}</span>
              {isHost && <span className="host-badge">üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</span>}
              <div className="connection-status">
                –°—Ç–∞—Ç—É—Å: {connectionStatus === 'connected' ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 
                        connectionStatus === 'connecting' ? 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 
                        'üî¥ –û—à–∏–±–∫–∞'}
              </div>
            </div>
          </div>
          
          <div className="header-controls">
            <button onClick={openInviteModal} className="invite-btn">
              üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            </button>
            <button onClick={leaveRoom} className="leave-btn">
              üìû –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </header>

      {error && (
        <div className="error-message">
          {error}
          <div className="error-buttons">
            <button onClick={initializeWebRTC} className="retry-btn">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            <button onClick={restartCamera} className="retry-btn">
              –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É
            </button>
          </div>
        </div>
      )}

      <div className="room-content">
        <div className="video-container">
          {/* –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ */}
          <div className="video-wrapper local-video">
            <video
              ref={localVideoRef}
              autoPlay
              muted
              playsInline
              className="video-element"
            />
            <div className="video-label">
              –í—ã {isHost && 'üëë'} - {currentUser?.name}
              <div className="status-indicators">
                {!isAudioEnabled && <span className="muted-indicator">üîá</span>}
                {!isVideoEnabled && <span className="muted-indicator">‚ùå</span>}
              </div>
            </div>
          </div>

          {/* –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ */}
          {Object.entries(remoteStreams).map(([userId, stream]) => (
            <div key={userId} className="video-wrapper remote-video">
              <video
                ref={el => remoteVideosRef.current[userId] = el}
                autoPlay
                playsInline
                className="video-element"
              />
              <div className="video-label">
                –£—á–∞—Å—Ç–Ω–∏–∫ {userId}
                <div className="remote-status">
                  {stream.getVideoTracks().length > 0 ? 'üìπ' : '‚ùå'}
                  {stream.getAudioTracks().length > 0 ? 'üé§' : 'üîá'}
                </div>
              </div>
            </div>
          ))}

          {/* –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ */}
          {Object.keys(remoteStreams).length === 0 && (
            <div className="video-wrapper empty-video">
              <div className="empty-video-message">
                <div className="empty-icon">üë•</div>
                <p>–û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
                <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</p>
              </div>
            </div>
          )}
        </div>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ */}
        <div className="sidebar">
          <div className="participants-section">
            <h3>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length})</h3>
            <div className="participants-list">
              {participants.map(participant => (
                <div key={participant.id} className="participant-item">
                  <span className="participant-name">
                    {participant.name}
                    {participant.isHost && ' üëë'}
                  </span>
                  <span className="participant-status">
                    {remoteStreams[participant.id] ? 'üü¢ Online' : '‚ö´ Offline'}
                  </span>
                </div>
              ))}
            </div>
          </div>

          <div className="controls-section">
            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
            <div className="control-buttons">
              <button 
                onClick={toggleAudio}
                className={`control-btn ${isAudioEnabled ? 'active' : 'muted'}`}
              >
                {isAudioEnabled ? 'üîä –ú–∏–∫—Ä–æ—Ñ–æ–Ω' : 'üîá –í—ã–∫–ª'}
              </button>
              <button 
                onClick={toggleVideo}
                className={`control-btn ${isVideoEnabled ? 'active' : 'muted'}`}
              >
                {isVideoEnabled ? 'üìπ –ö–∞–º–µ—Ä–∞' : '‚ùå –í—ã–∫–ª'}
              </button>
              <button 
                onClick={restartCamera}
                className="control-btn restart"
              >
                üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É
              </button>
              <button onClick={openInviteModal} className="control-btn invite">
                üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
              </button>
              <button onClick={leaveRoom} className="control-btn leave">
                üìû –í—ã–π—Ç–∏
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ */}
          <div className="room-info-section">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ</h3>
            <div className="room-info-details">
              <div className="info-item">
                <span className="info-label">ID –∫–æ–º–Ω–∞—Ç—ã:</span>
                <span className="info-value">{roomId}</span>
              </div>
              <div className="info-item">
                <span className="info-label">–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</span>
                <span className="info-value">{inviteLink}</span>
              </div>
              <div className="info-item">
                <span className="info-label">–°—Ç–∞—Ç—É—Å:</span>
                <span className={`info-value status-${connectionStatus}`}>
                  {connectionStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 
                   connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–û—à–∏–±–∫–∞'}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ù–∏–∂–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
      <div className="mobile-controls">
        <button 
          onClick={toggleAudio}
          className={`control-btn ${isAudioEnabled ? 'active' : 'muted'}`}
        >
          {isAudioEnabled ? 'üîä' : 'üîá'}
        </button>
        <button 
          onClick={toggleVideo}
          className={`control-btn ${isVideoEnabled ? 'active' : 'muted'}`}
        >
          {isVideoEnabled ? 'üìπ' : '‚ùå'}
        </button>
        <button onClick={restartCamera} className="control-btn restart">
          üîÑ
        </button>
        <button onClick={openInviteModal} className="control-btn invite">
          üì®
        </button>
        <button onClick={leaveRoom} className="control-btn leave">
          üìû
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
      {showInviteModal && (
        <div className="modal-overlay" onClick={closeInviteModal}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <h3>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É</h3>
            <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:</p>
            <div className="invite-link-container">
              <code className="invite-link">
                {window.location.origin}/?join={inviteLink}
              </code>
            </div>
            <div className="modal-buttons">
              <button onClick={copyInviteLink} className="copy-btn">
                üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
              </button>
              <button onClick={closeInviteModal} className="close-btn">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
            <div className="invite-tips">
              <p><strong>–°–æ–≤–µ—Ç—ã:</strong></p>
              <ul>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∏–ª–∏ email</li>
                <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–º–µ–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
                <li>–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É</li>
              </ul>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default RoomPage;