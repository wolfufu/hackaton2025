import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './HomePage.css';

const API_BASE = 'http://localhost:8000/api';

function HomePage() {
  const [newRoomName, setNewRoomName] = useState('');
  const [inviteLink, setInviteLink] = useState('');
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const createTestUser = async () => {
      try {
        const response = await axios.post(`${API_BASE}/users`, {
          email: `user_${Date.now()}@test.com`,
          name: `User${Date.now().toString().slice(-4)}`
        });
        setCurrentUser(response.data);
      } catch (error) {
        console.error('Error creating user:', error);
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        setCurrentUser({ id: 1, name: 'Test User', email: 'test@test.com' });
      }
    };
    createTestUser();
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–µ–µ
  const createRoom = async () => {
    if (!currentUser || !newRoomName.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE}/rooms`, {
        name: newRoomName,
        created_by: currentUser.id
      });
      
      const roomId = response.data.room_id;
      setInviteLink(response.data.invite_link);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É
      navigate(`/room/${roomId}`, { 
        state: { 
          roomId: roomId,
          inviteLink: response.data.invite_link,
          roomName: newRoomName,
          isHost: true,
          currentUser: currentUser
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      
      // –ü—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      try {
        const testResponse = await axios.post(`${API_BASE}/rooms/test`, {
          name: newRoomName
        });
        
        navigate(`/room/${testResponse.data.room_id}`, {
          state: {
            roomId: testResponse.data.room_id,
            inviteLink: testResponse.data.invite_link,
            roomName: newRoomName,
            isHost: true,
            currentUser: currentUser
          }
        });
        
      } catch (testError) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + (testError.response?.data?.detail || testError.message));
      }
    } finally {
      setLoading(false);
    }
  };

  // –í—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É
  const joinRoom = async () => {
    if (!inviteLink.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
      return;
    }

    setLoading(true);
    try {
      const response = await axios.get(`${API_BASE}/rooms/${inviteLink}`);
      
      navigate(`/room/${response.data.room_id}`, {
        state: {
          roomId: response.data.room_id,
          inviteLink: inviteLink,
          roomName: response.data.room_name,
          isHost: false,
          currentUser: currentUser
        }
      });
      
    } catch (error) {
      alert('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="home-page">
      <header className="home-header">
        <h1>üé• Video Conference</h1>
        <p>–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á–µ</p>
      </header>

      <div className="home-content">
        {/* –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
        <section className="create-section">
          <h2>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É</h2>
          <div className="input-group">
            <input
              type="text"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
              value={newRoomName}
              onChange={(e) => setNewRoomName(e.target.value)}
              disabled={loading}
            />
            <button 
              onClick={createRoom} 
              disabled={!currentUser || loading || !newRoomName.trim()}
              className="create-btn"
            >
              {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'}
            </button>
          </div>
        </section>

        <div className="divider">
          <span>–∏–ª–∏</span>
        </div>

        {/* –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É */}
        <section className="join-section">
          <h2>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ</h2>
          <div className="input-group">
            <input
              type="text"
              placeholder="–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
              value={inviteLink}
              onChange={(e) => setInviteLink(e.target.value)}
              disabled={loading}
            />
            <button 
              onClick={joinRoom} 
              disabled={loading || !inviteLink.trim()}
              className="join-btn"
            >
              {loading ? '–í—Ö–æ–¥...' : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'}
            </button>
          </div>
        </section>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        {currentUser && (
          <div className="user-info">
            <p>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <strong>{currentUser.name}</strong></p>
          </div>
        )}
      </div>
    </div>
  );
}

export default HomePage;